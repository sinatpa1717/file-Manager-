#file manager 
#programing python
#aug ,16 ,2025 

from open_data import open_json_file
from runcommand import run_command_user

class Manger:
    def __init__(self, name):
        self.name = name 

class File_Manger (Manger):
    def __init__(self, name , a):
        super().__init__(name)
        self.a = a   

    def menu(self):
        flag =True
        while flag:
            massage = f"------welcome to file manger so------"
            print(massage.upper())
            massage1 = "--[1] show list command"
            print(massage1.title())
            massage2 = "--[2] run a command"
            print(massage2.title())
            massage3 = "esc terminal [q]"
            print(massage3.title())
            try:
                massage_user_input = input("Command: ").strip().lower()
                
            except ValueError:
                print("error !".upper())
            except TypeError:
                print("error !".upper())
            except KeyboardInterrupt:
                print("error !".upper())
            except UnboundLocalError:
                print("q ?")

            if massage_user_input == "1":
                open_json_file()
            elif massage_user_input == "2":
                run_command_user()
            elif massage_user_input == "q":
                flag = False

m = Manger(name="")
x = File_Manger(a="" , name="")
x.menu()



# run code user
from mkdir import mkdir_user_file
from rmfile import rmfile_user
from remove_file import remove_file_user
from pwdfilem import pwd_user
from cdfile import cd_file_user
from seachfile import seach_file_user
import os 

def run_command_user():
    massage = "esc terminal [esc]"
    print(massage)
    flag = True 
    while flag:
        try:
            run_command_user_input = input(": ").strip().lower()
            if run_command_user_input == "mkdir":
                mkdir_user_file()
            elif run_command_user_input == "rm":
                rmfile_user()
            elif run_command_user_input == "remove":
                remove_file_user()
            elif run_command_user_input == "pwd":
                pwd_user()
            elif run_command_user_input == "cd":
                cd_file_user()
            elif run_command_user_input == "search":
                seach_file_user()
                
        except TypeError:
            print("error !".upper())
        except KeyboardInterrupt:
            massage_userr = "esc?"
            print(massage_userr)
        except UnboundLocalError:
            massage_user = "esc?"
            print(massage_user)

        if run_command_user_input == "q":
            flag  = False




#mkdir 
import os 
def mkdir_user_file():
    flag = True 
    while flag:
        try:
            name_file_user = input("name file: ".title())
            if  name_file_user == "q":
                flag = False
                break

            for i in os.mkdir(f"{name_file_user}"):
                print(i)

        except TypeError:
            pass
        except FileExistsError:
            print("error !".upper())
        except UnboundLocalError:
            pass
            
# rm file
import os 
def rmfile_user ():
    flag = True 
    while flag:
        try:
            massage_user_input = input("name file: ".title())
            x = os.rmdir(massage_user_input)
        except FileNotFoundError:
            pass
        if massage_user_input == "q":
            flag = False
            break
#remove file
import os 
def remove_file_user():
    flag = True
    while flag:
        try:
            remove_file_user_input = input("name file: ".title())
            if remove_file_user_input == "q":
                flag = False
            x = os.remove(f"{remove_file_user_input}")
        except FileNotFoundError:
            print("error !".upper())


#pwd
import os
def pwd_user():
    x = os.getcwd()
    print(x)


#c
import os
def cd_file_user():
    flag = True
    while flag:
        try:
            masir = input(":masir ")
            if masir == "q":
                flag = False
            os.chdir(masir)
        except FileNotFoundError:
            print("error !".upper())



# search
import os
def seach_file_user ():
    flag = True
    while flag:
        try:
            seach_file_user_input = input("search file: ")
            if seach_file_user_input == "q":
                flag = False
        except ValueError:
            print("error !".upper())
            
        x = os.path.exists(seach_file_user_input)
        if x :
            print("this file")
        else:
            print("not file")
                
